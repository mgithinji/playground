from typing import List
import os
import openai
import argparse
import logging
import re

# global variable to ensure the GPT-3 API isn't overloaded by a long user prompt.
MAX_INPUT_LENGTH = 32

class InputValidationException(Exception):
    def __init__(self, *args: object, message='', errors=None) -> None:
        super().__init__(*args)
        self.message = message
        self.error = errors

logger = logging.getLogger(__name__)

# format the tagline text generated by GPT-3
def _format_tagline_text(s: str) -> str:
    # remove leading and trailing white spaces
    text = s.strip()

    # adding ellipses for truncated text
    terminal_punctuations = [".", "!", "?"]
    last_char = text[-1]
    if last_char not in terminal_punctuations:
        text += "..."

    # capitalizing the text
    text = text.capitalize()

    return text

# format the keywords str generated by GPT-3 into an array
def _format_keywords_text(s: str) -> List[str]:
    # remove leading and trailing white spaces
    text = s.strip()
    
    # creating an array from AI generated text
    array = re.split(r",|\n|;|-", text)
    
    # remove empty strings from array, strip off white spaces, make all lowercase
    array = [kw.lower().strip() for kw in array if kw]

    return array

# generate a business tagline based on user-provided prompt
def generate_tagline(prompt: str, max_tokens: int=20) -> str:
    # load OpenAI API key
    openai.api_key = os.getenv('OPENAI_API_KEY')

    # prompt for GPT-3 model
    enriched_prompt = "Write a confident tagline for a {} business:".format(prompt)

    # calling the API and grabbing the response
    response = openai.Completion.create(model="text-davinci-002", prompt=enriched_prompt, max_tokens=max_tokens)

    # isolating the text from the response
    text = response["choices"][0]["text"]
    text = _format_tagline_text(text)
    
    return text

# generate business keywords based on user-provided prompt
def generate_keywords(prompt: str, max_tokens: int=20) -> List[str]:
    # load OpenAI API key
    openai.api_key = os.getenv('OPENAI_API_KEY')

    # prompt for GPT-3 model
    enriched_prompt = "Generate related keywords for a {} business:".format(prompt)

    # calling the API and grabbing the response
    response = openai.Completion.create(model="text-davinci-002", prompt=enriched_prompt, max_tokens=max_tokens)

    # isolating the text from the response
    text = response["choices"][0]["text"]
    keywords = _format_keywords_text(text)
    
    return keywords

# used to ensure user-provided input does not exceed given length
def _validate_input(prompt: str) -> bool:
    return len(prompt) <= MAX_INPUT_LENGTH 


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("--input", "-i", type=str, required=True, 
                        help="Prompt for AI generator to use.")
    parser.add_argument("--tokens", "-t", type=int, default=20, 
                        help="Number of tokens (words) AI should generate.")
    args = parser.parse_args()

    prompt = args.input
    tokens = args.tokens

    if _validate_input(prompt=prompt):
        tagline = generate_tagline(prompt=prompt, max_tokens=tokens)
        keywords = generate_keywords(prompt=prompt, max_tokens=tokens)
    else:
        raise InputValidationException("User input exceeds the character limit of {}.".format(MAX_INPUT_LENGTH))
        
    print(tagline)
    print(keywords)


if __name__ == "__main__":
    main()